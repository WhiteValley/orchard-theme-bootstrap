@*
    * Shape override for BOOLEAN fields on CustomForms. Renders the Bootstrap markup
    * Currently only implmented the bootstrap markup for checkboxes
*@
@model Orchard.Fields.Fields.BooleanField
@using Orchard.Fields.Settings;
@{
    var settings = Model.PartFieldDefinition.Settings.GetModel<BooleanFieldSettings>();
}
@switch (settings.SelectionMode)
{
        @* Bootstrap markup *@
    case SelectionMode.Checkbox:
        {
            <div class="checkbox">
                <label for="@Html.FieldIdFor(m => m.Value)">
                    <input type="checkbox" id="@(Html.FieldIdFor(m => m.Value))" value="true" name="@Html.FieldNameFor(m => m.Value)" @if (Model.Value.HasValue && Model.Value.Value) { <text> checked="checked" </text>    } />
                    @T(settings.Hint)
                </label>
                <input name="@Html.FieldNameFor(m => m.Value)" type="hidden" value="false" />
            </div>
            @Html.ValidationMessageFor(m => m.Value)
            break;
        }
        @* Default markup for radios *@
    case SelectionMode.Radiobutton:
        {
            <fieldset>
                <label for="@Html.FieldIdFor(m => m.Value)">@Model.DisplayName</label>
                @if (settings.Optional)
                {
                    <div>
                        <input type="radio" name="@Html.FieldNameFor(m => m.Value)" id="radio-unknown" value="" @if (!Model.Value.HasValue) { <text> checked="checked" </text>   } />
                        <label for="radio-unknown" class="forcheckbox">@T(settings.NotSetLabel)</label>
                    </div>
                }
                <div>
                    <input type="radio" name="@Html.FieldNameFor(m => m.Value)" id="radio-true" value="true" @if (Model.Value.HasValue && Model.Value.Value) { <text> checked="checked" </text>   } />
                    <label for="radio-true" class="forcheckbox">@T(settings.OnLabel)</label>
                </div>
                <div>
                    <input type="radio" name="@Html.FieldNameFor(m => m.Value)" id="radio-false" value="false" @if (Model.Value.HasValue && !Model.Value.Value) { <text> checked="checked" </text>   } />
                    <label for="radio-false" class="forcheckbox">@T(settings.OffLabel)</label>
                </div>
                @Html.ValidationMessageFor(m => m.Value)
                @if (HasText(settings.Hint))
                {
                    <span class="hint">@settings.Hint</span>
                }
            </fieldset>
            break;
        }
        @* Default markup for dropdowns *@
    case SelectionMode.Dropdown:
        {
            <fieldset>
                <label for="@Html.FieldIdFor(m => m.Value)">@Model.DisplayName</label>
                <select id="@(Html.FieldIdFor(m => m.Value) + "-dropdown")" name="@Html.FieldNameFor(m => m.Value)">
                    @if (settings.Optional)
                    {
                        Html.SelectOption("", !Model.Value.HasValue, T(settings.NotSetLabel).ToString());
                    }
                    @Html.SelectOption("true", (Model.Value.HasValue && Model.Value.Value), T(settings.OnLabel).ToString())
                    @Html.SelectOption("false", (Model.Value.HasValue && !Model.Value.Value), T(settings.OffLabel).ToString())
                </select>
                @Html.ValidationMessageFor(m => m.Value)
                @if (HasText(settings.Hint))
                {
                    <span class="hint">@settings.Hint</span>
                }
            </fieldset>
            break;
        }
    default: break;
}

